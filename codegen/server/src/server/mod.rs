#![allow(unused_extern_crates)]
extern crate serde_ignored;
extern crate tokio_core;
extern crate native_tls;
extern crate hyper_tls;
extern crate openssl;
extern crate mime;
extern crate chrono;
extern crate percent_encoding;
extern crate url;

use std::sync::Arc;
use std::marker::PhantomData;
use futures::{Future, future, Stream, stream};
use hyper;
use hyper::{Request, Response, Error, StatusCode};
use hyper::header::{Headers, ContentType};
use self::url::form_urlencoded;
use mimetypes;
use serde_json;

#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
#[allow(unused_imports)]
use swagger;
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use swagger::auth::Authorization;
use swagger::{ApiError, XSpanId, XSpanIdString, Has, RequestParser};
use swagger::auth::Scopes;
use swagger::headers::SafeHeaders;

use {Api,
     DescribeCollectionResponse,
     GetCollectionsResponse,
     GetConformanceDeclarationResponse,
     GetLandingPageResponse,
     GetFeatureResponse,
     GetFeaturesResponse
     };
#[allow(unused_imports)]
use models;

pub mod context;

header! { (Warning, "Warning") => [String] }

mod paths {
    extern crate regex;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(vec![
            r"^/$",
            r"^/collections$",
            r"^/collections/(?P<collection_id>[^/?#]*)$",
            r"^/collections/(?P<collection_id>[^/?#]*)/items$",
            r"^/collections/(?P<collection_id>[^/?#]*)/items/(?P<feature_id>[^/?#]*)$",
            r"^/conformance$"
        ]).unwrap();
    }
    pub static ID_: usize = 0;
    pub static ID_COLLECTIONS: usize = 1;
    pub static ID_COLLECTIONS_COLLECTIONID: usize = 2;
    lazy_static! {
        pub static ref REGEX_COLLECTIONS_COLLECTIONID: regex::Regex = regex::Regex::new(r"^/collections/(?P<collection_id>[^/?#]*)$").unwrap();
    }
    pub static ID_COLLECTIONS_COLLECTIONID_ITEMS: usize = 3;
    lazy_static! {
        pub static ref REGEX_COLLECTIONS_COLLECTIONID_ITEMS: regex::Regex = regex::Regex::new(r"^/collections/(?P<collection_id>[^/?#]*)/items$").unwrap();
    }
    pub static ID_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID: usize = 4;
    lazy_static! {
        pub static ref REGEX_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID: regex::Regex = regex::Regex::new(r"^/collections/(?P<collection_id>[^/?#]*)/items/(?P<feature_id>[^/?#]*)$").unwrap();
    }
    pub static ID_CONFORMANCE: usize = 5;
}

pub struct NewService<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> NewService<T, C> {
        NewService{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::NewService for NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Instance = Service<T, C>;

    fn new_service(&self) -> Result<Self::Instance, io::Error> {
        Ok(Service::new(self.api_impl.clone()))
    }
}

pub struct Service<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static {
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> Service<T, C> {
        Service{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::Service for Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString>  + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Future = Box<dyn Future<Item=Response, Error=Error>>;

    fn call(&self, (req, mut context): Self::Request) -> Self::Future {
        let api_impl = self.api_impl.clone();
        let (method, uri, _, headers, body) = req.deconstruct();
        let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

        // This match statement is duplicated below in `parse_operation_id()`.
        // Please update both places if changing how this code is autogenerated.
        match &method {

            // DescribeCollection - GET /collections/{collectionId}
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID) => {
                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_COLLECTIONS_COLLECTIONID
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE COLLECTIONS_COLLECTIONID in set but failed match against \"{}\"", path, paths::REGEX_COLLECTIONS_COLLECTIONID.as_str())
                    );
                let param_collection_id = match percent_encoding::percent_decode(path_params["collection_id"].as_bytes()).decode_utf8() {
                    Ok(param_collection_id) => match param_collection_id.parse::<String>() {
                        Ok(param_collection_id) => param_collection_id,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter collectionId: {:?}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["collection_id"]))))
                };
                Box::new({
                        {{
                                Box::new(api_impl.describe_collection(param_collection_id, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                DescribeCollectionResponse::InformationAboutTheFeatureCollectionWithId

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::DESCRIBE_COLLECTION_INFORMATION_ABOUT_THE_FEATURE_COLLECTION_WITH_ID.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                DescribeCollectionResponse::TheRequestedURIWasNotFound


                                                => {
                                                    response.set_status(StatusCode::try_from(404).unwrap());

                                                },
                                                DescribeCollectionResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::DESCRIBE_COLLECTION_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            // GetCollections - GET /collections
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS) => {
                Box::new({
                        {{
                                Box::new(api_impl.get_collections(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetCollectionsResponse::TheFeatureCollectionsSharedByThisAPI

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_COLLECTIONS_THE_FEATURE_COLLECTIONS_SHARED_BY_THIS_API.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetCollectionsResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_COLLECTIONS_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            // GetConformanceDeclaration - GET /conformance
            &hyper::Method::Get if path.matched(paths::ID_CONFORMANCE) => {
                Box::new({
                        {{
                                Box::new(api_impl.get_conformance_declaration(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetConformanceDeclarationResponse::TheURIsOfAllConformanceClassesSupportedByTheServer

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_CONFORMANCE_DECLARATION_THE_UR_IS_OF_ALL_CONFORMANCE_CLASSES_SUPPORTED_BY_THE_SERVER.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetConformanceDeclarationResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_CONFORMANCE_DECLARATION_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            // GetLandingPage - GET /
            &hyper::Method::Get if path.matched(paths::ID_) => {
                Box::new({
                        {{
                                Box::new(api_impl.get_landing_page(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetLandingPageResponse::TheLandingPageProvidesLinksToTheAPIDefinition

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_LANDING_PAGE_THE_LANDING_PAGE_PROVIDES_LINKS_TO_THE_API_DEFINITION.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetLandingPageResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_LANDING_PAGE_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            // GetFeature - GET /collections/{collectionId}/items/{featureId}
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID) => {
                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID in set but failed match against \"{}\"", path, paths::REGEX_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID.as_str())
                    );
                let param_collection_id = match percent_encoding::percent_decode(path_params["collection_id"].as_bytes()).decode_utf8() {
                    Ok(param_collection_id) => match param_collection_id.parse::<String>() {
                        Ok(param_collection_id) => param_collection_id,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter collectionId: {:?}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["collection_id"]))))
                };
                let param_feature_id = match percent_encoding::percent_decode(path_params["feature_id"].as_bytes()).decode_utf8() {
                    Ok(param_feature_id) => match param_feature_id.parse::<String>() {
                        Ok(param_feature_id) => param_feature_id,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter featureId: {:?}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["feature_id"]))))
                };
                Box::new({
                        {{
                                Box::new(api_impl.get_feature(param_collection_id, param_feature_id, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetFeatureResponse::FetchTheFeatureWithId

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_FEATURE_FETCH_THE_FEATURE_WITH_ID.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetFeatureResponse::TheRequestedURIWasNotFound


                                                => {
                                                    response.set_status(StatusCode::try_from(404).unwrap());

                                                },
                                                GetFeatureResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_FEATURE_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            // GetFeatures - GET /collections/{collectionId}/items
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID_ITEMS) => {
                // Path parameters
                let path = uri.path().to_string();
                let path_params =
                    paths::REGEX_COLLECTIONS_COLLECTIONID_ITEMS
                    .captures(&path)
                    .unwrap_or_else(||
                        panic!("Path {} matched RE COLLECTIONS_COLLECTIONID_ITEMS in set but failed match against \"{}\"", path, paths::REGEX_COLLECTIONS_COLLECTIONID_ITEMS.as_str())
                    );
                let param_collection_id = match percent_encoding::percent_decode(path_params["collection_id"].as_bytes()).decode_utf8() {
                    Ok(param_collection_id) => match param_collection_id.parse::<String>() {
                        Ok(param_collection_id) => param_collection_id,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse path parameter collectionId: {:?}", e)))),
                    },
                    Err(_) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't percent-decode path parameter as UTF-8: {}", &path_params["collection_id"]))))
                };
                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_limit = query_params.iter().filter(|e| e.0 == "limit").map(|e| e.1.to_owned())
                    .nth(0);

                let param_limit = param_limit.and_then(|param_limit| param_limit.parse::<>().ok());
                let param_bbox = query_params.iter().filter(|e| e.0 == "bbox").map(|e| e.1.to_owned())
                    .filter_map(|param_bbox| param_bbox.parse::<f64>().ok())
                    .collect::<Vec<_>>();
                let param_bbox = if !param_bbox.is_empty() {
                    Some(param_bbox)
                } else {
                    None
                };
                let param_datetime = query_params.iter().filter(|e| e.0 == "datetime").map(|e| e.1.to_owned())
                    .nth(0);

                let param_datetime = param_datetime.and_then(|param_datetime| param_datetime.parse::<>().ok());
                Box::new({
                        {{
                                Box::new(api_impl.get_features(param_collection_id, param_limit, param_bbox.as_ref(), param_datetime, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &dyn Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GetFeaturesResponse::TheResponseIsADocumentConsistingOfFeaturesInTheCollection

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_FEATURES_THE_RESPONSE_IS_A_DOCUMENT_CONSISTING_OF_FEATURES_IN_THE_COLLECTION.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetFeaturesResponse::AQueryParameterHasAnInvalidValue

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(400).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_FEATURES_A_QUERY_PARAMETER_HAS_AN_INVALID_VALUE.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                                GetFeaturesResponse::TheRequestedURIWasNotFound


                                                => {
                                                    response.set_status(StatusCode::try_from(404).unwrap());

                                                },
                                                GetFeaturesResponse::AServerErrorOccurred

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(500).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GET_FEATURES_A_SERVER_ERROR_OCCURRED.clone()));

                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");
                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))
                        }}
                }) as Box<dyn Future<Item=Response, Error=Error>>
            },

            _ => Box::new(future::ok(Response::new().with_status(StatusCode::NotFound))) as Box<dyn Future<Item=Response, Error=Error>>,
        }
    }
}

impl<T, C> Clone for Service<T, C>
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}


/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser for ApiRequestParser {
    fn parse_operation_id(request: &Request) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // DescribeCollection - GET /collections/{collectionId}
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID) => Ok("DescribeCollection"),

            // GetCollections - GET /collections
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS) => Ok("GetCollections"),

            // GetConformanceDeclaration - GET /conformance
            &hyper::Method::Get if path.matched(paths::ID_CONFORMANCE) => Ok("GetConformanceDeclaration"),

            // GetLandingPage - GET /
            &hyper::Method::Get if path.matched(paths::ID_) => Ok("GetLandingPage"),

            // GetFeature - GET /collections/{collectionId}/items/{featureId}
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID_ITEMS_FEATUREID) => Ok("GetFeature"),

            // GetFeatures - GET /collections/{collectionId}/items
            &hyper::Method::Get if path.matched(paths::ID_COLLECTIONS_COLLECTIONID_ITEMS) => Ok("GetFeatures"),
            _ => Err(()),
        }
    }
}
