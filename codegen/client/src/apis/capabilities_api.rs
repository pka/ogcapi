/*
 * A sample API conforming to the draft standard OGC API - Features - Part 1: Core
 *
 * This is a sample OpenAPI definition that conforms to the conformance classes \"Core\", \"GeoJSON\", \"HTML\" and \"OpenAPI 3.0\" of the draft standard \"OGC API - Features - Part 1: Core\".  This example is a generic OGC API Features definition that uses path parameters to describe all feature collections and all features. The generic OpenAPI definition does not provide any details on the collections or the feature content. This information is only available from accessing the feature collection resources.  There is [another example](ogcapi-features-1-example2.yaml) that specifies each collection explicitly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@example.org
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CapabilitiesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CapabilitiesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CapabilitiesApiClient<C> {
        CapabilitiesApiClient {
            configuration,
        }
    }
}

pub trait CapabilitiesApi {
    fn describe_collection(&self, collection_id: &str) -> Box<dyn Future<Item = crate::models::Collection, Error = Error<serde_json::Value>>>;
    fn get_collections(&self, ) -> Box<dyn Future<Item = crate::models::Collections, Error = Error<serde_json::Value>>>;
    fn get_conformance_declaration(&self, ) -> Box<dyn Future<Item = crate::models::ConfClasses, Error = Error<serde_json::Value>>>;
    fn get_landing_page(&self, ) -> Box<dyn Future<Item = crate::models::LandingPage, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>CapabilitiesApi for CapabilitiesApiClient<C> {
    fn describe_collection(&self, collection_id: &str) -> Box<dyn Future<Item = crate::models::Collection, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/collections/{collectionId}".to_string())
        ;
        req = req.with_path_param("collectionId".to_string(), collection_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_collections(&self, ) -> Box<dyn Future<Item = crate::models::Collections, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/collections".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_conformance_declaration(&self, ) -> Box<dyn Future<Item = crate::models::ConfClasses, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/conformance".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    fn get_landing_page(&self, ) -> Box<dyn Future<Item = crate::models::LandingPage, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

}
